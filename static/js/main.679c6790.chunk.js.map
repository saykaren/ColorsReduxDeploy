{"version":3,"sources":["js/constants.js","js/reducers/ReducerIndex.js","js/store/index.js","js/actions/addColorAction.js","components/app/Form.js","components/app/App.js","serviceWorker.js","js/WindowIndex.js","index.js"],"names":["constants","SORT_COLORS","ADD_COLORS","RATE_COLORS","REMOVE_COLORS","ADD_ARTICLE","UP_RATING","DOWN_RATING","initialState","colors","id","title","color","rating","timestamp","rootReducer","state","action","type","C","Object","assign","concat","payload","filter","x","map","store","createStore","addColor","Form","connect","dispatch","props","console","log","useState","setTitle","setColor","timeStamp","setTimeStamp","todayDate","Date","toString","handleChange","event","target","value","onSubmit","preventDefault","uuidv1","className","htmlFor","onChange","placeholder","subscribe","getState","App","useSelector","useDispatch","el","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.679c6790.chunk.js","sourcesContent":["const constants = {\r\n  SORT_COLORS: 'SORT_COLORS',\r\n  ADD_COLORS: 'ADD_COLORS',\r\n  RATE_COLORS: 'RATE_COLORS',\r\n  REMOVE_COLORS: 'REMOVE_COLORS',\r\n  ADD_ARTICLE: 'ADD_ARTICLE',\r\n  UP_RATING: 'UP_RATING',\r\n  DOWN_RATING: 'DOWN_RATING'\r\n}\r\n\r\nexport default constants","import C from '../constants';\r\n\r\nconst initialState = {\r\n  colors: [\r\n    {\r\n      id: \"3315e1p5-3abl-0p523-30e4-8001l8yf3036\",\r\n      title: \"Rad Red\",\r\n      color: \"#FF0000\",\r\n      rating: 3,\r\n      timestamp: \"Sat Mar 12 2016 16:12:09 GMT-0800 (PST)\"\r\n    },\r\n    {\r\n      id: \"3315e1p5-3abl-0p523-30e4-8001l8yf4457\",\r\n      title: \"Crazy Green\",\r\n      color: \"#00FF00\",\r\n      rating: 0,\r\n      timestamp: \"Fri Mar 11 2016 12:00:00 GMT-0800 (PST)\"\r\n    },\r\n    {\r\n      id: \"3315e1p5-3abl-0p523-30e4-8001l8yf2412\",\r\n      title: \"Big Blue\",\r\n      color: \"#0000FF\",\r\n      rating: 5,\r\n      timestamp: \"Thu Mar 10 2016 01:11:12 GMT-0800 (PST)\"\r\n    }\r\n  ],\r\n};\r\n\r\nfunction rootReducer(state = initialState, action){\r\n  switch(action.type){\r\n    case C.ADD_COLORS:\r\n        return Object.assign({}, state, {\r\n          colors: state.colors.concat(action.payload)\r\n        });\r\n    case C.REMOVE_COLORS: \r\n      const newArray = {...state}.colors.filter(x=>(x.id !==action.payload.id));\r\n      const objectArray = {colors: newArray}\r\n      return objectArray;       \r\n    case C.UP_RATING:\r\n      const newArrayRating = {...state}.colors.map(x=>(x.id===action.payload.id)? {...x, rating: x.rating+=1}: x);\r\n      const objectArrayRating = {colors: newArrayRating}\r\n      return objectArrayRating;  \r\n    case C.DOWN_RATING:\r\n      const newArrayRatingDown = {...state}.colors.map(x=>(x.id===action.payload.id)? {...x, rating: x.rating-=1}: x);\r\n      const objectArrayRatingDown = {colors: newArrayRatingDown}\r\n      return objectArrayRatingDown; \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;","import {createStore} from 'redux';\r\nimport rootReducer from '../reducers/ReducerIndex';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import C from '../constants';\r\n\r\nexport function addColor(payload){\r\n  return {type: C.ADD_COLORS, payload}\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport uuidv1 from 'uuid';\r\nimport {addColor} from '../../js/actions/addColorAction';\r\n\r\nfunction mapDisptachToProps (dispatch){\r\n  return{\r\n    addColor: colors => dispatch(addColor(colors))\r\n  };\r\n}\r\n\r\nconst ConnectedForm = (props)=>{\r\n  console.log(props);\r\n  const [title, setTitle] = useState('');\r\n  const [color, setColor] = useState('');\r\n  const [rating] = useState(0);\r\n  const [timeStamp, setTimeStamp] = useState(\"\");\r\n\r\n  const todayDate = ()=>{\r\n    return (new Date()).toString();\r\n  }\r\n\r\n  const handleChange=(event)=>{\r\n    if(event.target.id === \"color\"){ \r\n      setColor(event.target.value);\r\n      setTimeStamp(todayDate());\r\n    }\r\n    if(event.target.id === \"title\"){\r\n      setTitle(event.target.value);\r\n      setTimeStamp(todayDate());\r\n    }    \r\n  }\r\n\r\n  const handleSubmit=(event)=>{\r\n    event.preventDefault();    \r\n    const id = uuidv1();\r\n    setTimeStamp(todayDate());\r\n    props.addColor({id, title, color, rating, timeStamp});\r\n  }\r\n  \r\n    return(\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor='title'>Color Information</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id='title'\r\n            value={title}\r\n            onChange={handleChange}\r\n            placeholder=\"Color Name\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id='color'\r\n            value={color}\r\n            onChange={handleChange}\r\n            placeholder=\"Hex Color\"\r\n          />\r\n        </div>\r\n        <button \r\n          type=\"submit\" \r\n          className=\"btn\"\r\n        >\r\n          Save\r\n        </button>\r\n      </form>\r\n    );\r\n  \r\n}\r\n\r\nconst Form = connect (null, mapDisptachToProps)(ConnectedForm);\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Form from './Form';\nimport {useSelector, useDispatch} from 'react-redux';\nimport C from './../../js/constants';\nimport store from './../../js/store/index.js'\n\nstore.subscribe(()=>{\n  store.getState();\n})\n\nfunction App(){\n  \n  const colors = useSelector((state)=>state.colors);\n  const dispatch = useDispatch();\n\n  return(\n  <div className=\"colorsList\">\n    <div className=\"colorAdder\">\n      <h2>Colors List</h2>\n        <Form />\n       \n    </div>\n    <section className=\"colorAdder\">\n      <strong>Redux Store List </strong>\n      <ul className='list-group list-group-flush'>\n    {colors.map(el=>(\n      <li className='list-group-item' key={el.id} >\n        {el.title} : {el.rating}\n\n        <button\n          onClick={(()=>dispatch({type: C.UP_RATING, payload: el}))}\n          value={el.title}\n          id={el.id}\n          color={el.color}\n          rating={el.rating}\n          className=\"deleteButton\"\n        >\n          Up\n        </button>\n        <button\n          onClick={(()=>dispatch({type: C.DOWN_RATING, payload: el}))}\n          value={el.title}\n          id={el.id}\n          color={el.color}\n          rating={el.rating}\n          className=\"deleteButton\"\n        >\n          Down\n        </button>\n        <button\n          onClick={(()=>dispatch({type: C.REMOVE_COLORS, payload: el}))}\n          value={el.title}\n          id={el.id}\n          color={el.color}\n          rating={el.rating}\n          className=\"deleteButton\"\n        >\n          X \n        </button>\n      </li>\n    ))}\n  </ul>\n    </section>\n  </div>\n  )\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import store from \"./store/index\";\r\nimport {addColor} from './actions/addColorAction';\r\n\r\nwindow.store = store;\r\nwindow.addColor = addColor;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './js/store/index';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport index from './js/WindowIndex';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}